@page "/ownedinstruments";
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<UserSettings> Logger


<style>
    .blog-post {
        max-width: 800px;
        margin: 0 auto 30px auto;
        padding: 20px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .blog-post-title {
        font-size: 2.5rem;
        margin-bottom: 10px;
    }

    .blog-post-meta {
        font-size: 1.1rem;
        color: #888;
        margin-bottom: 20px;
    }

    .blog-post hr {
        margin-top: 30px;
        margin-bottom: 30px;
        border: 0;
        border-top: 1px solid #ccc;
    }
</style> 

<h1>Omat soittimet</h1>

@if (null == rentalinstruments)
{
    <p>@LoginInfo.Id</p>

}
@if (null == rentalinstruments)
{
    <p>Ladataan soittimia...</p>

}
else
{
    @foreach (var item in rentalinstruments)
    {
        <div class="blog-post">

            <h2 class="blog-post-title">Tyyppi: @item.Type</h2>
            <h2 class="blog-post-title">Malli: @item.Model</h2>
            <h2 class="blog-post-title">Hinta: @item.Price</h2>
            <h2 class="blog-post-title">Lisätiedot: @item.InstrumentInfo</h2>
            <h2 class="blog-post-title">Valmistusvuosi: @item.ModelYear</h2>
          

         @if (item.Picture != null)
            {
                <img src="data:image/png;base64,@Convert.ToBase64String(item.Picture)" style="max-width: 100%; height: auto;" />
            }
            <hr>
      
            <a class="btn btn-warning" href="@($"/rentalinstruments/update/{item.IdRentalInstrument}")">Muokkaa soitinta</a>

@*            @if (LoginInfo.LoggedIn)
            {
                <NavLink href="@($"rentalinstrumentEdit/{item.IdRentalInstrument}")">
                    <p><p><button class="btn btn-warning"> Muokkaa</button></p></p>
                </NavLink>
                <button class="btn btn-danger" @onclick="DeleteBtnClicked">Poista soitin</button>
            }*@
        </div>
    }
}


@code {
    [Parameter]
    public int? Id { get; set; }
    private RentalInstrument[]? rentalinstruments;
    private RentalInstrument rentalinstrument;

    protected override async Task OnParametersSetAsync()
    {
        if (LoginInfo.Id != null)
        {
            Id = LoginInfo.Id;
            rentalinstruments = await Http.GetFromJsonAsync<RentalInstrument[]>($"rentalinstrument/{Id}");
        }

    }
    //private async Task DeleteBtnClicked()
    //{
    //    await JsRuntime.InvokeVoidAsync("alert", "Et voi poistaa instrumenttia johon linkittyy lainaus!");

    //}

   
}
