@page "/acceptrequest/{instrumentid:int}";
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILogger<UserSettings> Logger

<style>

	.form-group {
		margin-bottom: 20px;
	}

	.form-check {
		margin-left: 10px;
		width: 20px;
		height: 20px;
	}

	label {
		display: block;
		margin-bottom: 5px;
		font-weight: bold;
	}

	.input-error {
		color: red;
	}

	.image-container {
		display: flex;
		flex-wrap: wrap;
		margin-bottom: 20px;
		max-width: 500px;
		max-height: 500px;
	}

		.image-container img {
			max-width: 500px;
			max-height: 500px;
			cursor: pointer;
			border: 1px solid transparent;
			transition: border-color 0.3s ease-in-out;
		}

			.image-container img:hover {
				border-color: #007bff;
				opacity: 0.4;
			}

	.selected-image {
		border: 2px solid blue;
	}

	.form-control {
		width: 50%;
	}

	.form-date {
		width: 25%;
	}

	label {
		cursor: pointer;
		display: inline-block;
	}
</style>

<PageTitle>Hyväksy vuokrauspyyntö</PageTitle>

<h1>Hyväksy vuokrauspyyntö</h1>


@if (null == rentalInstrument)
{
	<p>Ladataan soitinta...</p>

}
else
{

	<div class="card" style="max-width: 740px;">

		<h4 class="card-header">@rentalInstrument.Type</h4>
		<div class="card-body">
			<EditForm Model="@rentalInstrument" OnValidSubmit="@RequestAccepted">
				<DataAnnotationsValidator />
				<ValidationSummary />
			
				<div class="form-group">
					<label for="picture">
						@if (rentalInstrument.Picture == null)
						{
							<div class="image-container">
								<img src="~src\BlazorPeople\wwwroot\images\trip_images\trip1_image1.png" />
							</div>

						}
						else
						{
							<div class="image-container">
								<img src="data:image/jpg;base64,@Convert.ToBase64String(rentalInstrument.Picture)" style="max-width: 70%; height: auto;" class="trip-picture" />
							</div>

						}
					</label>
					<InputFile class="form-control-file" id="picture" name="picture" OnChange="async (e) => await HandlePictureChange(e)" style="display: none;" />
				</div>
				<div class="form-group">
					<p></p>
					<label>Tyyppi</label>
					<InputText maxlength="34" class="form-control" @bind-Value="rentalInstrument.Type" disabled="@disabled"  />
				</div>

				<div class="form-group">
					<p></p>
					<label>Malli</label>
					<InputText maxlength="34" class="form-control" @bind-Value="rentalInstrument.Model" disabled="@disabled" />
				</div>

				<div class="form-group">
					<p></p>
					<label>Valmistusvuosi</label>
					<InputText maxlength="34" class="form-control" @bind-Value="rentalInstrument.ModelYear" disabled="@disabled" />
					
				</div>

				<div class="form-group">
					<p></p>
					<label>Hinta</label>
					<InputNumber maxlength="34" class="form-control" @bind-Value="rentalInstrument.Price" disabled="@disabled" />
				
				</div>

				<div class="form-group">
					<p></p>
					<label>Lisätiedot</label>
					<InputText maxlength="34" class="form-control" @bind-Value="rentalInstrument.InstrumentInfo" disabled="@disabled" />
					
				</div>

				

@*		    <div class="form-group">
			<label>Alkupäivämäärä</label>
			<br>
			<InputDate class="form-date" @bind-Value="dateStart" disabled="@disabled"/>
			
			</div>
			<div class="form-group">
			<label>Loppupäivämäärä</label>
			<br>
			<InputDate class="form-date" @bind-Value="dateEnd" disabled="@disabled" />
			</div>*@

			
			<p></p>
				
				<p>
					<button class="btn btn-primary" type="submit" disabled="@isSubmitting">Hyväksy vuokrauspyyntö</button>
					
				</p>


			</EditForm>
			<p>
				<NavLink class="btn btn-primary mt-5" href="@($"/rentalrequests")">Takaisin lainauspyyntöihin</NavLink>
			</p>
		</div>
	</div>




}


@code {
	[Parameter]
	public int instrumentid { get; set; }
	private RentalInstrument? rentalInstrument = new RentalInstrument();
	private Rental? rental;
	bool isSubmitting;
	public DateTime dateStart = new();
	public DateTime dateEnd = new();
	bool disabled = true;


	protected override async Task OnInitializedAsync()
	{
		var tempInstruments = await Http.GetFromJsonAsync<RentalInstrument[]>("rentalInstrument");
		rentalInstrument = tempInstruments.FirstOrDefault(s => s.IdRentalInstrument == instrumentid);
		rental = await Http.GetFromJsonAsync<Rental>($"rental/{instrumentid}");

		if (rental != null)
		{
			dateStart = rental.Rentalstart;
			dateEnd = rental.Rentalend;
		}
		
	}

	private async Task RequestAccepted()
	{
		Logger.LogInformation("RequestAccepted() called");
	

		isSubmitting = true;

		// Process the valid form
		rentalInstrument.Lainattu = true;
		rentalInstrument.Lainauspyynto = false;
		var result2 = await Http.PutAsJsonAsync($"RentalInstrument/{instrumentid}", rentalInstrument);
		if (result2.IsSuccessStatusCode)
		{
			StateHasChanged();
			await InvokeAsync(StateHasChanged);
			NavigationManager.NavigateTo($"/rentalrequests");
		}
		else
		{
			Logger.LogError($"Failed to POST new rental. Details: {result2.ReasonPhrase}");
		}

		
	}

	private async Task HandlePictureChange(InputFileChangeEventArgs e)
	{
		var buffer = new byte[e.File.Size];
		await e.File.OpenReadStream().ReadAsync(buffer);
		rentalInstrument.Picture = buffer;
	}
}